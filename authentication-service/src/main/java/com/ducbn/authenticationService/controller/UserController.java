package com.ducbn.authenticationService.controller;import com.ducbn.authenticationService.component.LocalizationUtils;import com.ducbn.authenticationService.dto.UserLoginDTO;import com.ducbn.authenticationService.dto.UserRegisterDTO;import com.ducbn.authenticationService.model.User;import com.ducbn.authenticationService.response.LoginResponse;import com.ducbn.authenticationService.response.RegisterResponse;import com.ducbn.authenticationService.service.UserService;import jakarta.validation.Valid;import lombok.RequiredArgsConstructor;import org.springframework.http.ResponseEntity;import org.springframework.validation.BindingResult;import org.springframework.validation.FieldError;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.List;@RestController@RequestMapping("/api/users")@RequiredArgsConstructorpublic class UserController {    private final UserService userService;    private final LocalizationUtils localizationUtils;    @PostMapping("/register")    public ResponseEntity<RegisterResponse> createUser (@Valid @RequestBody UserRegisterDTO userDTO, BindingResult result) {        try{            if (result.hasErrors()) {                List<String> errorMessages = result.getFieldErrors()                        .stream()                        .map(FieldError::getDefaultMessage)                        .toList();                return ResponseEntity.badRequest().body(                        RegisterResponse.builder()                                .message("REGISTER FAILED")                                .build()                );            }            if(!userDTO.getPassword().equals(userDTO.getRetypePassword())){                return ResponseEntity.badRequest().body(                        RegisterResponse.builder()                                .user(null)                                .message("PASSWORD_NOT_MATCH")                                .build()                );            }            User user = userService.registerUser(userDTO);            return ResponseEntity.ok(                    RegisterResponse.builder()                            .user(user)                            .message("REGISTER_SUCCESSFULLY")                            .build()            );        }catch (Exception e){            return ResponseEntity.badRequest().body(                    RegisterResponse.builder()                            .message("REGISTER_FAILED")                            .build()            );        }    }    @PostMapping("/login")    public ResponseEntity<LoginResponse> login(            @Valid @RequestBody UserLoginDTO userLoginDTO)    {        //check information login and create token        try {            String token = userService.login(                    userLoginDTO.getPhoneNumber(),                    userLoginDTO.getPassword(),                    userLoginDTO.getRoleId() == null ? 2 : userLoginDTO.getRoleId()            );            return ResponseEntity.ok(LoginResponse.builder()                    .token(token)                    .message(localizationUtils.getLocalizedMessage("LOGIN_SUCCESSFULLY"))                    .build());        } catch (Exception e) {            return ResponseEntity.badRequest().body(                    LoginResponse.builder()                            .message(localizationUtils.getLocalizedMessage("LOGIN_FAILED", e.getMessage()))                            .build()            );        }    }}